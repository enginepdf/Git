* reference

https://backlog.com/git-tutorial/kr/stepup/stepup5_1.html


git init // make a git repository

git clone <Repository URL>  // get data from the Repository of URL

git status // check the status at the moment

git rm 

git remote add <nickname> <Repository URL of co-worker>

git remote -v   // check if it is added

git add <files>  // git add --all, add the data/files to staging area.

git commit -m 'messages'  // commit the data added with 'messages'

git push origin<nickname> master // push the data you added to origin repository

git pull <nickname> master  // get the 'nickname's repository

git checkout <branch name>  // change working space to 'branch name'

git checkout -b  <branch name>  // generate the 'branch name' branch and move to the branch


git fetch upstream

git merge upstream/master

git config --list

git config --global user.name "name"
git config --global user.email 'email'

git log

git log --graph


* git stash

git stash   // 아직 마무리하지 않은 작업을 스택에 잠시 저장할 수 있도록 하는 명령어. commit 하지 않고 나중에 다시 작업 재개
            // stash의 저장 영역은 스택 구조
            // === git stash save  스택에 새로운 stash가 만들어지고 working directory는 깨끗해짐


git stash list // cat .git/refs/stash

git stash apply // 작업 가져오기

git stash apply --index // Staged 상태가지 복원

git stash drop [stash name] // 스택에 남아 있는 stash를 제거

git stash pop  // git stash apply +  git stash pop

git stash show -p | git apply -R  // 가장 최근의 stash 사용하여 패치 만들어 그것을 거꾸로 적용.(stash 적용한 것 되돌림)


git config  --global alias.c commit
    git c -m 'Commit Message'


* tag

    commit을 참조하기 쉽도록 알기 쉬운 이름을 붙이는 것
    Lightweight tag(이름만), Annotated tag(설명, 서명, 이름 등 상세 정보)

    mkdir tag-test
    cd tag-test
    git init  // Initialized empty Git repository in Desktop/tag-test/.git/
    touch test.txt
    git add .
    git commit -m 'first commit'

    git tag first  // 현재 'HEAD'가 가리키고 있는 커밋에 'first'라는 태그 달려고 함
    git tag // first
    
    git log --decorate   // commit <hashed code> (HEAD, tag: firstTag, main)
                            Author, Data
                            first commit

    git tag -a <tagname>   // 주석이 달린 태그 추가
    git tag -am 'second tag' second   // 현재 'HEAD'가 가리키고 있는 커밋에 'second'이라는 주석이 달린 태그 달기

    git tag -n  // first 'first commit'    second 'second Tag'

    git tag -d <tagname>   // delete the tagname
